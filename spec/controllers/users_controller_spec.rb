require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "username" => "MyString", "email" => "foo@berkeley.edu", "password" => "nine", "password_confirmation" => "nine" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  # describe "GET index" do
  #   it "assigns all users as @users" do
  #     user = User.create! valid_attributes
  #     get :index, {}, valid_session
  #     assigns(:users).should eq([user])
  #   end
  # end

  # describe "GET show" do
  #   it "assigns the requested user as @user" do
  #     user = User.create! valid_attributes
  #     get :show, {:id => user.to_param}, valid_session
  #     assigns(:user).should eq(user)
  #   end
  # end

  # describe "GET new" do
  #   it "assigns a new user as @user" do
  #     get :new, {}, valid_session
  #     assigns(:user).should be_a_new(User)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested user as @user" do
  #     user = User.create! valid_attributes
  #     get :edit, {:id => user.to_param}, valid_session
  #     assigns(:user).should eq(user)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new User" do
  #       expect {
  #         post :create, {:user => valid_attributes}, valid_session
  #       }.to change(User, :count).by(1)
  #     end

  #     it "assigns a newly created user as @user" do
  #       post :create, {:user => valid_attributes}, valid_session
  #       assigns(:user).should be_a(User)
  #       assigns(:user).should be_persisted
  #     end

  #     it "redirects to the created user" do
  #       post :create, {:user => valid_attributes}, valid_session
  #       response.should redirect_to(User.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved user as @user" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       User.any_instance.stub(:save).and_return(false)
  #       post :create, {:user => { "username" => "invalid value" }}, valid_session
  #       assigns(:user).should be_a_new(User)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       User.any_instance.stub(:save).and_return(false)
  #       post :create, {:user => { "username" => "invalid value" }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested user" do
  #       user = User.create! valid_attributes
  #       # Assuming there are no other users in the database, this
  #       # specifies that the User created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       User.any_instance.should_receive(:update).with({ "username" => "MyString" })
  #       put :update, {:id => user.to_param, :user => { "username" => "MyString" }}, valid_session
  #     end

  #     it "assigns the requested user as @user" do
  #       user = User.create! valid_attributes
  #       put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
  #       assigns(:user).should eq(user)
  #     end

  #     it "redirects to the user" do
  #       user = User.create! valid_attributes
  #       put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
  #       response.should redirect_to(user)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the user as @user" do
  #       user = User.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       User.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => user.to_param, :user => { "username" => "invalid value" }}, valid_session
  #       assigns(:user).should eq(user)
  #     end

  #     it "re-renders the 'edit' template" do
  #       user = User.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       User.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => user.to_param, :user => { "username" => "invalid value" }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested user" do
  #     user = User.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => user.to_param}, valid_session
  #     }.to change(User, :count).by(-1)
  #   end

  #   it "redirects to the users list" do
  #     user = User.create! valid_attributes
  #     delete :destroy, {:id => user.to_param}, valid_session
  #     response.should redirect_to(users_url)
  #   end
  # end

  before(:each) do
    DatabaseCleaner.clean_with(:truncation)
  end

  ######## ORGANIZATION TESTS #########
  describe "create organization" do
    it "creates a valid organization" do
      post :finishRecruiter, {:user => valid_attributes, :org_choice => "create", "organization" => "MyOrg"}
      org = Organization.where(:name => "MyOrg").first
      org.should_not be_nil
      org.name.should eq("MyOrg")
    end
  end


  describe "create bad organization" do
    it "attempts to creates an organization with bad recruiter input" do
      valid_attributes["username"] = "3"
      post :finishRecruiter, {:user => valid_attributes, :org_choice => "create", "organization" => "MyOrg2"}
      org = Organization.where(:name => "MyOrg2").first
      org.should be_nil
    end
  end

  describe "create no name organization" do
    it "attempts to creates an organization with no name" do
      post :finishRecruiter, {:user => valid_attributes, :org_choice => "create", "organization" => ""}
      org = Organization.where(:name => "").first
      org.should be_nil
    end

    it "attempts to creates an organization with bad name" do
      post :finishRecruiter, {:user => valid_attributes, :org_choice => "create", "organization" => nil}
      org = Organization.where(:name => "").first
      org.should be_nil
    end
  end

  describe "create bad organization" do
    it "attempts to creates an organization with bad recruiter input 2" do
      valid_attributes["username"] = "3"
      post :finishRecruiter, {:user => valid_attributes, :org_choice => "create", "organization" => "MyOrg2"}
      org = Organization.where(:name => "MyOrg2").first
      org.should be_nil
    end
  end


  describe "create valid org and check redirect" do
    it "attempts to creates an organization and check redirect" do
      post :finishRecruiter, {:user => valid_attributes, :org_choice => "create", "organization" => "MyOrg2"}
      org = Organization.where(:name => "MyOrg2").first
      org.should_not be_nil
      response.should redirect_to "/verify"
      user = User.where(:username => "MyString").first
      user.recruiter.should eq(true)
    end
  end
   
  describe "create valid org and check redirect error" do
    it "attempts to creates an organization and check redirect" do
      post :finishRecruiter, {:user => valid_attributes, :org_choice => "create", "organization" => ""}
      org = Organization.where(:name => "MyOrg2").first
      org.should be_nil
      response.should redirect_to "/"
    end
  end


  describe "create valid org and check redirect error" do
    it "attempts to creates an organization and check error redirect with bad password" do
      valid_attributes["password"] = 4
      post :finishRecruiter, {:user => valid_attributes, :org_choice => "create", "organization" => ""}
      org = Organization.where(:name => "MyOrg2").first
      org.should be_nil
      response.should redirect_to "/"
    end
  end
  ######## END ORGANIZATION TESTS #########


  ######## CREATE STUDENT TESTS #########  

  describe "create valid student" do
    it "attempts to creates a valid student" do
      post :create,  {:user => valid_attributes}
      user = User.find(1)
      user.should_not be_nil
      response.should redirect_to "/verify"
    end
  end

  describe "create valid student" do
    it "attempts to creates a valid student" do
      post :create,  {:user => valid_attributes}
      user = User.find(1)
      user.should_not be_nil
      user.username.should eq("MyString")
      response.should redirect_to "/verify"
    end
  end

  describe "create invalid student" do
    it "attempts to creates a invalid student bad username" do
      valid_attributes["username"] = nil
      post :create,  {:user => valid_attributes}
      user = User.where(:username => nil).first
      user.should be_nil
      response.should redirect_to "/"
    end

    it "attempts to creates a invalid student bad password" do
      valid_attributes["password"] = "foo"
      post :create,  {:user => valid_attributes}
      user = User.where(:username => nil).first
      user.should be_nil
      response.should redirect_to "/"
    end
  end

  describe "create duplicate student" do
    it "attempts to creates a 2 users w/ same info" do
      post :create,  {:user => valid_attributes}
      user = User.where(:username => "MyString").first
      user.should_not be_nil
      response.should redirect_to "/verify"

      post :create,  {:user => valid_attributes}
      response.should redirect_to "/"
    end
  end

  describe "create invalid student" do
    it "attempts to creates a student w/ non berkeley email address" do
      valid_attributes["email"] = "foo@gmail.com"
      post :create,  {:user => valid_attributes}
      user = User.where(:username => "MyString").first
      user.should be_nil
      response.should redirect_to "/"
    end

    it "attempts to creates a student w/ non berkeley email address" do
      valid_attributes["email"] = "foo@blahberkeley.com"
      post :create,  {:user => valid_attributes}
      user = User.where(:username => "MyString").first
      user.should be_nil
      response.should redirect_to "/"
    end
  end

  describe "create valid mba student" do
    it "attempts to creates a mba.berkeley.edu student" do
      valid_attributes["email"] = "foo@mba.berkeley.edu"
      post :create,  {:user => valid_attributes}
      user = User.where(:username => "MyString").first
      user.should_not be_nil
      response.should redirect_to "/verify"
    end
  end

  ######## END CREATE STUDENT TESTS #########  
end
